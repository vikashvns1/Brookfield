@page "/DynamicView"
@using System.Data;
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.Charts
@using Syncfusion.Blazor.Data
@inject NavigationManager NavigationManager
@inherits DynamicViewBase
@using System.Dynamic
@using Newtonsoft.Json;
@using System.Collections.ObjectModel;
@using Brookfield.Models;

<h3>@Tital</h3>

@if (ParamList.Count > 0)
{
    int i = 0;

    <div>
        @foreach (var item in ParamList)
        {
            <label>@item.Label</label> <label> : </label>

            if (item.Control == "Text")
            {
                <Syncfusion.Blazor.Inputs.SfTextBox Type="@item.Type" @bind-Value="@item.Value" Width="150px"></Syncfusion.Blazor.Inputs.SfTextBox>
            }
            else if (item.Control == "ddl")
            {
                string url = "https://localhost:5001/api/Values/Get/" + ConnString + "," + item.Sp + "," + "Select";

                <Syncfusion.Blazor.DropDowns.SfDropDownList TValue="string" TItem="@object" Placeholder="Select Department" @bind-Value="@item.Value" ShowClearButton="true" Width="160px">
                    @if (IsInitialRender == false)
                    {
                        <Syncfusion.Blazor.Data.SfDataManager Url="@url" Adaptor="Adaptors.WebApiAdaptor" CrossDomain="true"></Syncfusion.Blazor.Data.SfDataManager>
                    }
                    <Syncfusion.Blazor.DropDowns.DropDownListFieldSettings Value="@item.Key" Text="@item.KeyValue"></Syncfusion.Blazor.DropDowns.DropDownListFieldSettings>
                </Syncfusion.Blazor.DropDowns.SfDropDownList>
            }
            i++;
        }

        <SfButton Type="submit" @onclick="submitedata">Submit</SfButton>

        @code {

            string display = "d-none";
            string displayMsg = "d-none";
            List<string> toolbar;

            async Task submitedata()
            {
                string jsonstring = string.Empty;
                jsonstring = await DynamicAPIService.GetDatabyParam(ParamList, ConnString, StoreProcedure, "Select");
                var response = JsonConvert.DeserializeObject<Brookfield.Models.OutputData>(jsonstring);

                if (response.DynamicData.Count > 0)
                {
                    RowsCount = response.DynamicData.Count.ToString();
                    IsInitialRender = true;
                    DynamicObject = null;
                    //DtEmployeeList = null;

                    DynamicObject = new ObservableCollection<ExpandoObject>(response.DynamicData);
                    if (IsInitialRenderGrid == false)
                    {
                        DtEmployeeList = Extensions.ToDataTable(response.DynamicData, "tbl");
                        ColumnCount = DtEmployeeList.Columns.Count.ToString();
                    }

                    display = "";
                    displayMsg = "d-none";
                }
                else
                {
                    display = "d-none";
                    displayMsg = "";
                }
            }

        }
    </div>
}
else
{
    display = "";
    displayMsg = "d-none";
}
<div id="target" class="card mb-3 @display">

    @if (DynamicObject == null)
    {
        <p><em>Loading.......</em></p>
    }
    else
    {
        if (Action == "All")
        {
            toolbar = (new List<string>() { "Total Rows : " + RowsCount, "Total Column: " + ColumnCount, "Add", "Print", "ExcelExport", "PdfExport", "ColumnChooser", "Search" });
        }
        else
        {
            toolbar = (new List<string>() { "Total Rows : " + RowsCount, "Total Column: " + ColumnCount, "Print", "ExcelExport", "PdfExport", "ColumnChooser", "Search" });
        }

        <SfGrid DataSource="@DynamicObject" GridLines="@GridLine.Both" @ref="DefaultGrid"
                TValue="ExpandoObject" Toolbar="@toolbar" AllowFiltering="true"
                AllowGrouping="true" AllowMultiSorting="true" AllowSorting="true" ShowColumnChooser="true" AllowReordering="true" AllowTextWrap="true" AllowResizing="true" AllowPdfExport="true" AllowExcelExport="true">
           <GridFilterSettings  Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>
            <GridEvents OnActionBegin="ActionBeginAsync" OnToolbarClick="ToolbarClickHandler" TValue="ExpandoObject"></GridEvents>
            <GridEditSettings AllowAdding="true" AllowDeleting="true" AllowEditing="true" Mode="EditMode.Normal" ShowConfirmDialog="true" AllowEditOnDblClick="false"></GridEditSettings>

            <GridColumns>

                @foreach (DataColumn col in DtEmployeeList.Columns)
                {
                    IsInitialRenderGrid = true;
                    switch (col.DataType.FullName)
                    {
                        case "System.Int64":
                            @if (ColumnList.Count > 0)
                            {
                                var Colitem = ColumnList.Find(a => a.Name.ToUpper() == col.ToString().ToUpper());
                                if (Colitem != null)
                                {
                                    bool _IsPrimaryKey = Colitem.IsPrimaryKey == true ? true : false;
                                    <GridColumn Field="@col.ToString()" Type="ColumnType.Number" AllowEditing="@Colitem.Edit" HeaderTextAlign="@TextAlign.Center" EditType="EditType.NumericEdit" TextAlign="@TextAlign.Right" IsIdentity="@_IsPrimaryKey" IsPrimaryKey="@Colitem.IsPrimaryKey" AllowFiltering="@Colitem.Filter" ShowInColumnChooser="true">
                                     @if (_IsPrimaryKey == true)
                                     { 
                                     }
                                    </GridColumn>
                                }
                                else
                                {
                                    <GridColumn Field="@col.ToString()" Type="ColumnType.Number" HeaderTextAlign="@TextAlign.Center" TextAlign="@TextAlign.Right" EditType="EditType.NumericEdit" ShowInColumnChooser="true" />
                                }
                            }
                            else
                            {
                                <GridColumn Field="@col.ToString()" Type="ColumnType.Number" HeaderTextAlign="@TextAlign.Center" TextAlign="@TextAlign.Right" EditType="EditType.NumericEdit" ShowInColumnChooser="true" />
                            }
                            break;
                        case "System.DateTime":
                            @if (ColumnList.Count > 0)
                            {
                                var Colitem = ColumnList.Find(a => a.Name.ToUpper() == col.ToString().ToUpper());
                                if (Colitem != null)
                                {
                                    <GridColumn Field="@col.ToString()" Type="ColumnType.Date" Format="MM/dd/yyyy" AllowEditing="@Colitem.Edit" HeaderTextAlign="@TextAlign.Center" AllowFiltering="@Colitem.Filter" EditType="EditType.DatePickerEdit" ShowInColumnChooser="true" />
                                }
                                else
                                {
                                    <GridColumn Field="@col.ToString()" Format="MM/dd/yyyy" HeaderTextAlign="@TextAlign.Center" Type="ColumnType.Date" EditType="EditType.DatePickerEdit" ShowInColumnChooser="true" />
                                }
                            }
                            else
                            {
                                <GridColumn Field="@col.ToString()" Format="MM/dd/yyyy" HeaderTextAlign="@TextAlign.Center" Type="ColumnType.Date" EditType="EditType.DatePickerEdit" ShowInColumnChooser="true" />
                            }
                            break;
                        case "System.String":
                            @if (ColumnList.Count > 0)
                            {
                                var Colitem = ColumnList.Find(a => a.Name.ToUpper() == col.ToString().ToUpper());
                                if (Colitem != null)
                                {
                                    <GridColumn Field="@col.ToString()" Type="ColumnType.String" AllowEditing="@Colitem.Edit" HeaderTextAlign="@TextAlign.Center" AllowFiltering="@Colitem.Filter" ShowInColumnChooser="true" />
                                }
                                else
                                {
                                    <GridColumn Field="@col.ToString()" HeaderTextAlign="@TextAlign.Center" Type="ColumnType.String" ShowInColumnChooser="true" />
                                }
                            }
                            else
                            {
                                <GridColumn Field="@col.ToString()" HeaderTextAlign="@TextAlign.Center" Type="ColumnType.String" ShowInColumnChooser="true" />
                            }
                            break;
                    }

                }
                @if (Action == "All")
                {
                    <GridColumn HeaderText="Manage Records">
                        <GridCommandColumns>
                            <GridCommandColumn Type="CommandButtonType.Edit" ButtonOption="@(new CommandButtonOptions() { IconCss = "e-icons e-edit", CssClass = "e-flat" })"></GridCommandColumn>
                            <GridCommandColumn Type="CommandButtonType.Delete" ButtonOption="@(new CommandButtonOptions() { IconCss = "e-icons e-delete", CssClass = "e-flat" })"></GridCommandColumn>
                            <GridCommandColumn Type="CommandButtonType.Save" ButtonOption="@(new CommandButtonOptions() { IconCss = "e-icons e-update", CssClass = "e-flat" })"></GridCommandColumn>
                            <GridCommandColumn Type="CommandButtonType.Cancel" ButtonOption="@(new CommandButtonOptions() { IconCss = "e-icons e-cancel-icon", CssClass = "e-flat" })"></GridCommandColumn>
                        </GridCommandColumns>
                    </GridColumn>
                }
            </GridColumns>


        </SfGrid>
    }
</div>
<div class="card mb-3 @displayMsg">
    <lable>No data found</lable>
</div>


<SfDialog Width="360px" @ref="@DlgRef" Target="#target" ShowCloseIcon="true" Visible="false">
    <DialogTemplates>
        <Header> @PopHeadarMsg </Header>
        <Content> @PopMsg </Content>
    </DialogTemplates>
    <DialogPositionData X="420" Y="240" />
    <DialogButtons>
        <DialogButton OnClick="@CloseDialog">
            <DialogButtonModel Content="OK" IsPrimary="true"></DialogButtonModel>
        </DialogButton>
    </DialogButtons>
</SfDialog>

<style>
    #target {
        margin-top: 10px;
    }
</style>
@if (ChartDataObj != null)
{
    <div class="control-section">
        <SfChart Title="Employee joining statistics">
            <ChartArea><ChartAreaBorder Width="0"></ChartAreaBorder></ChartArea>
            <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.DateTimeCategory" Interval="1">
                <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
            </ChartPrimaryXAxis>
            <ChartPrimaryYAxis>
                <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
                <ChartAxisLabelStyle Color="transparent"></ChartAxisLabelStyle>
                <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
                <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
            </ChartPrimaryYAxis>
            <ChartZoomSettings EnableMouseWheelZooming="true" EnablePinchZooming="true" EnableSelectionZooming="true"></ChartZoomSettings>
            <ChartSeriesCollection>
                <ChartSeries DataSource="@ChartDataObj" XName="@AttributesOfChart.XName" YName="@AttributesOfChart.YName" Name="@AttributesOfChart.Name" Type="ChartSeriesType.Column">
                    <ChartMarker>
                        <ChartDataLabel Visible="true" Position="Syncfusion.Blazor.Charts.LabelPosition.Top">
                            <ChartDataLabelFont FontWeight="600" Color="#ffffff"></ChartDataLabelFont>
                        </ChartDataLabel>
                    </ChartMarker>
                </ChartSeries>
            </ChartSeriesCollection>
            <ChartTooltipSettings Enable="true"></ChartTooltipSettings>
        </SfChart>
    </div>

    <div class="row">
        <div class="col-lg-8 control-section">
            <div class="control-section">
                <SfAccumulationChart Title="Employee joining statistics" EnableAnimation="true">
                    <AccumulationChartTooltipSettings Enable="true"></AccumulationChartTooltipSettings>
                    <AccumulationChartLegendSettings Visible="true"></AccumulationChartLegendSettings>
                    <AccumulationChartSeriesCollection>
                        <AccumulationChartSeries DataSource="@ChartDataObj" XName="@AttributesOfChart.XName" YName="@AttributesOfChart.YName" Name="@AttributesOfChart.Name" Radius="@OuterRadius" StartAngle="@StartAngle" EndAngle="@EndAngle"
                                                 InnerRadius="0%" ExplodeIndex="@ExplodeIndex" Explode="true" ExplodeOffset="@ExplodeRadius">
                            <AccumulationDataLabelSettings Visible="true" Name="@AttributesOfChart.XName" Position="AccumulationLabelPosition.Outside"></AccumulationDataLabelSettings>
                        </AccumulationChartSeries>
                    </AccumulationChartSeriesCollection>
                </SfAccumulationChart>
            </div>
        </div>
        <div class="col-lg-4 property-section">
            <table title="Properties" style="width: 100%">
                <tr style="height:50px"><th>Properties</th></tr>
                <tr style="height: 50px">
                    <td style="width: 50%">
                        <div>
                            Pie Angle:
                        </div>
                    </td>
                    <td style="width: 70%;">
                        <div class="">
                            <input type="range" @onchange="changeAngle" value="@value" min="0" max="360" style="width:90%" />
                        </div>
                    </td>
                    <td style="width: 30%">
                        <p style="font-weight: normal;"><span>@value</span></p>
                    </td>
                </tr>
                <tr style="height: 50px">
                    <td style="width: 50%">
                        <div>
                            Outer Radius:
                        </div>
                    </td>
                    <td style="width: 50%;">
                        <div data-role="rangeslider">
                            <input type="range" @onchange="ChangeOuterRadius" value="@radiusValue" min="0" max="80" style="width:90%" />
                        </div>
                    </td>
                    <td style="width: 30%">
                        <p style="font-weight: normal;"><span>@radiusValue</span></p>
                    </td>
                </tr>
                <tr style="height: 50px">
                    <td style="width: 50%">
                        <div>
                            Explode Radius:
                        </div>
                    </td>
                    <td style="width: 50%;">
                        <div data-role="rangeslider">
                            <input type="range" @onchange="ChangeExplodeRadius" value="@exploderadius" min="0" max="40" style="width:90%" />
                        </div>
                    </td>
                    <td style="width: 30%">
                        <p style="font-weight: normal;"><span>@exploderadius</span></p>
                    </td>
                </tr>
                <tr style="height: 50px">
                    <td style="width: 50%">
                        <div>
                            Explode Index:
                        </div>
                    </td>
                    <td style="width: 50%;">
                        <div data-role="rangeslider">
                            <input type="range" @onchange="ChangeExplodeIndex" value="@ExplodeIndex" min="0" max="6" style="width:90%" />
                        </div>
                    </td>
                    <td style="width: 30%">
                        <p style="font-weight: normal;"><span>@ExplodeIndex</span></p>
                    </td>
                </tr>
            </table>
        </div>
    </div>

    @code{
        public int StartAngle = 0, value = 0, EndAngle = 360, radiusValue = 70, exploderadius = 10;
        public double ExplodeIndex = 1;
        public string OuterRadius = "70%", ExplodeRadius = "10%";
        private void changeAngle(Microsoft.AspNetCore.Components.ChangeEventArgs args)
        {
            value = Convert.ToInt32(args.Value);
            StartAngle = +Convert.ToInt32(args.Value);
            EndAngle = +Convert.ToInt32(args.Value);
        }
        private void ChangeOuterRadius(Microsoft.AspNetCore.Components.ChangeEventArgs args)
        {
            radiusValue = Convert.ToInt32(args.Value);
            OuterRadius = args.Value + "%";
        }
        private void ChangeExplodeRadius(Microsoft.AspNetCore.Components.ChangeEventArgs args)
        {
            exploderadius = Convert.ToInt32(args.Value);
            ExplodeRadius = args.Value + "%";
        }
        private void ChangeExplodeIndex(Microsoft.AspNetCore.Components.ChangeEventArgs args)
        {
            ExplodeIndex = Convert.ToInt32(args.Value);
        }

    }

    <div class="control-section">
        <SfChart Title="Employee joining statistics">
            <ChartArea><ChartAreaBorder Width="0"></ChartAreaBorder></ChartArea>
            <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.DateTime" LabelFormat="y" IntervalType="IntervalType.Years" EdgeLabelPlacement="EdgeLabelPlacement.Shift">
                <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
            </ChartPrimaryXAxis>
            <ChartPrimaryYAxis LabelFormat="{value}%" RangePadding="ChartRangePadding.None" Minimum="0" Maximum="100" Interval="20">
                <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
                <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
            </ChartPrimaryYAxis>
            <ChartTooltipSettings Enable="true"></ChartTooltipSettings>
            <ChartZoomSettings EnableMouseWheelZooming="true" EnablePinchZooming="true" EnableSelectionZooming="true"></ChartZoomSettings>
            <ChartSeriesCollection>
                <ChartSeries DataSource="@ChartDataObj" Name="@AttributesOfChart.Name" XName="@AttributesOfChart.XName" Width="2"
                             Opacity="1" YName="@AttributesOfChart.YName" Type="ChartSeriesType.Line">
                    <ChartMarker Visible="true" Width="10" Height="10">
                    </ChartMarker>
                </ChartSeries>
            </ChartSeriesCollection>
        </SfChart>
    </div>
}
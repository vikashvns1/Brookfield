@page "/DynamicView"
@using System.Data;
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Grids
@inherits DynamicViewBase
@using System.Dynamic
@using Newtonsoft.Json;
@using System.Collections.ObjectModel;


<h3>@Tital</h3>

@if (paramList != null)
{
    int i = 0;

    <div>

        @foreach (var item in paramList)
        {
            <label>@item.Label</label> <label> : </label>
            
            @*<input type="@item.Type" @bind="@item.Value" class="input-group-sm" />*@
            <Syncfusion.Blazor.Inputs.SfTextBox Type="@item.Type" @bind-Value="@item.Value" Width="150px"></Syncfusion.Blazor.Inputs.SfTextBox>
            i++;
        }
        <SfButton Type="submit" @onclick="submitedata">Submit</SfButton>


        @code {



            //[Parameter]
            //public DataTable dt { get; set; }
            string display = "d-none";
            string displayMsg = "d-none";

            async Task submitedata()
            {

                string jsonstring = string.Empty;
                jsonstring = await dynamicAPIService.GetDatabyParam(paramList, connString, StoreProcedure, "Select");
                var response = JsonConvert.DeserializeObject<ObservableCollection<ExpandoObject>>(jsonstring);

                if (response.Count > 0)
                {
                    DynamicObject = null;
                    dtEmployeeList = null;
                    DynamicObject = response;
                    dtEmployeeList = (DataTable)JsonConvert.DeserializeObject(jsonstring, (typeof(DataTable)));
                    display = "";
                    displayMsg = "d-none";
                }
                else
                {
                    display = "d-none";
                    displayMsg = "";
                }
            }

        }

    </div>
}
<div class="card mb-3 @display">

    @if (DynamicObject == null)
    {
        <p><em>Loading.......</em></p>
    }
    else
    {
        <SfButton OnClick="ExcelExport" Content="Excel Export"></SfButton> <SfButton OnClick="PdfExport" Content="Pdf Export"></SfButton>
        <SfGrid DataSource="@DynamicObject" GridLines="@GridLine.Both" @ref="DefaultGrid"
                TValue="ExpandoObject" Toolbar="@(new List<string>() { "Add","Edit", "Delete", "Update", "Cancel","Search","Print" })" AllowFiltering="true"
                AllowGrouping="true" AllowMultiSorting="true" AllowSorting="true" AllowReordering="true" AllowTextWrap="true" AllowResizing="true" AllowPdfExport="true" AllowExcelExport="true">
            <GridEvents OnActionBegin="ActionBeginAsync" TValue="ExpandoObject"></GridEvents>
            <GridEditSettings AllowAdding="true" AllowDeleting="true" AllowEditing="true" Mode="EditMode.Normal"></GridEditSettings>
            <GridColumns>
                @foreach (DataColumn col in dtEmployeeList.Columns)
                {
                    switch (col.DataType.FullName)
                    {
                        case "System.Int64":
                            <GridColumn Field="@col.ToString()" Type="ColumnType.Number" HeaderTextAlign="@TextAlign.Center" TextAlign="@TextAlign.Right" AllowFiltering="false">
                                <FilterTemplate></FilterTemplate>
                            </GridColumn>
                            break;
                        case "System.DateTime":
                            <GridColumn Field="@col.ToString()" Format="MM/dd/yyyy" HeaderTextAlign="@TextAlign.Center" Type="ColumnType.Date" AllowFiltering="true">
                                @*<FilterTemplate>
                                        <Syncfusion.Blazor.Calendars.SfDatePicker TValue="DateTime" Format="d"></Syncfusion.Blazor.Calendars.SfDatePicker>
                                    </FilterTemplate>*@
                            </GridColumn>
                            break;
                        case "System.String":
                            <GridColumn Field="@col.ToString()" HeaderTextAlign="@TextAlign.Center" Type="ColumnType.String" AllowFiltering="true"></GridColumn>
                            break;
                    }
                }

            </GridColumns>
        </SfGrid>
       
    }
</div>
<div class="card mb-3 @displayMsg">
    <lable>No data found</lable>
</div>